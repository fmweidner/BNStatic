#NM
if (length(discardindices)>0){
sumMI <- 0
for (g in discardindices){
print(paste0("Gene index ", g))
paths <- all_simple_paths(graph, from=g, to=hubindices, mode="out")
#get last element for every [[p]] paths entry, only retain those where this is index=h
for (h in hubindices){
if (g == h){next}
lastelems <- which(sapply(paths, tail, 1) == h)
pathstoh <- rep(list(NA), length(lastelems))
print(paste(length(lastelems), "paths to hub", h, "out of", length(paths), "paths to all hubs"))
print("NM")
if (length(pathstoh)> 0){
for (el in 1:length(lastelems)){
pathstoh[[el]] <- paths[[lastelems[el]]]
}
maxMIs <- rep(NA, length(pathstoh))
#print(paste(length(pathstoh), "paths from index", g, "to", h))
#print(maxMIs)
for (pa in 1:length(pathstoh)){ #p=list of gene names in path
p <- pathstoh[[pa]]
MIpath <- 0
nodenames <- names(p)
nrnodes <- length(nodenames)
#which(colnames(adjmat) %in% nodenames)
nodenames
nodeindices <- rep(NA, length(nodenames))
for (v in 1:length(nodeindices)){
nodeindices[v] <- which(colnames(adjmat) == nodenames[v])
}# edge indices flowing from g->h
for (e in 1:(length(nodeindices)-1)){
MI <- MutInfo(SBML, fi=nodeindices[e+1], j=nodeindices[e])
#sum these up along the path, avg by pathlength, then add to sumMI
MIpath <- MIpath + MI
}
MIpath <- MIpath/(length(nodeindices)-1)
maxMIs[pa] <- MIpath
#print(MIpath)
}#paths loop
#print(maxMIs)
sumMI <- sumMI + max(maxMIs)
}#if length paths>0
}#end hub loop
}#end NM loop
sumMI <- sumMI/(length(discardindices)*length(hubindices))
maxMIbynet_NM[n] <- sumMI
}#if NMs exist
#NS
if (length(nsindices)>0){
sumMI <- 0
for (g in nsindices){
print(paste0("Gene index ", g))
paths <- all_simple_paths(graph, from=g, to=hubindices, mode="out")
#get last element for every [[p]] paths entry, only retain those where this is index=h
for (h in hubindices){
if (g == h){next}
lastelems <- which(sapply(paths, tail, 1) == h)
pathstoh <- rep(list(NA), length(lastelems))
print(paste(length(lastelems), "paths to hub", h, "out of", length(paths), "paths to all hubs"))
print("NS")
if (length(pathstoh)> 0){
for (el in 1:length(lastelems)){
pathstoh[[el]] <- paths[[lastelems[el]]]
}
maxMIs <- rep(NA, length(pathstoh))
#print(paste(length(pathstoh), "paths from index", g, "to", h))
#print(maxMIs)
for (pa in 1:length(pathstoh)){ #p=list of gene names in path
p <- pathstoh[[pa]]
MIpath <- 0
nodenames <- names(p)
nrnodes <- length(nodenames)
#which(colnames(adjmat) %in% nodenames)
nodenames
nodeindices <- rep(NA, length(nodenames))
for (v in 1:length(nodeindices)){
nodeindices[v] <- which(colnames(adjmat) == nodenames[v])
}# edge indices flowing from g->h
for (e in 1:(length(nodeindices)-1)){
MI <- MutInfo(SBML, fi=nodeindices[e+1], j=nodeindices[e])
#sum these up along the path, avg by pathlength, then add to sumMI
MIpath <- MIpath + MI
}
MIpath <- MIpath/(length(nodeindices)-1)
maxMIs[pa] <- MIpath
#print(MIpath)
}#paths loop
#print(maxMIs)
sumMI <- sumMI + max(maxMIs)
}#if length paths>0
}#end hub loop
}#end NS loop
sumMI <- sumMI/(length(nsindices)*length(hubindices))
maxMIbynet_NS[n] <- sumMI
}#if NS exist
}#end over all if hubs exist
#
}
#Calculate all simple paths from non-hub nodes to hubs, get mutual information along these paths
#get maximal MI along paths starting and ending at the same nodes
toppercent <- threshold <- 72
maxMIbynet_PM <- maxMIbynet_NM <- maxMIbynet_NS <- rep(NA, length(nets))
for (n in 1:length(nets)){
print(n)
##### get percentiles, VBnDP rankings etc #####
netfile <- paste(path, nets[n], sep = "")
SBML <- loadNetwork(netfile)
adjmat <- conv2adjmat(SBML, inputcorrected = F)
graph <- graph_from_adjacency_matrix(adjmat)
p <- ceiling((threshold/100)*dim(adjmat)[1])
VB <- readRDS(paste0(path, "/Network measures/", "net_", n, "_VB.RDS"))
DP <- readRDS(paste0(path, "/Network measures/", "net_", n, "_DP.RDS"))
Z <- readRDS(paste0(path, "/Network measures/", "net_", n, "_Z.RDS"))
Hamming <- readRDS(paste0(path, "/Network measures/", "net_", n, "_Hamming.RDS")) #Hamming distance
AttrLoss <- readRDS(paste0(path, "/Network measures/", "net_", n, "_AttrLoss.RDS")) #Attractor loss
AttrGain <- readRDS(paste0(path, "/Network measures/", "net_", n, "_AttrGain.RDS")) #Attractor gain
AvgDynRank <- colMeans(rbind(rank(-Hamming, ties.method ="min"), rank(AttrLoss, ties.method="min"), rank(-AttrGain, ties.method="min")), na.rm=TRUE)
xselect_VB <- sort(VB, decreasing = TRUE)[1:p]
xselect_DP <- sort(DP, decreasing = TRUE)[1:p]
VBRank <- rank(-VB, ties.method="min")
DPRank <- rank(-DP, ties.method="min")
name <- intersect(names(xselect_VB), names(xselect_DP))
VBnDP <- rep(NA, length(name))
names(VBnDP) <- name
Z_inVBnDP <- Z[which(names(Z) %in% names(VBnDP))]
for (g in 1:length(VBnDP)){
RankA <- VBRank[which(names(VBRank) == names(VBnDP)[g])]
RankB <- DPRank[which(names(DPRank) == names(VBnDP)[g])]
VBnDP[g] <- mean(c(RankA, RankB))
}
ZmatchVBnDP <- Z_inVBnDP[match(names(VBnDP), names(Z_inVBnDP))]
StatZQuantRatio <- rep(NA, length(VBnDP))
names(StatZQuantRatio) <- names(VBnDP)
for (g in 1:length(VBnDP)){
StatZQuantRatio[g] <- percentile(VBnDP, VBnDP[g]) - percentile(-ZmatchVBnDP, -ZmatchVBnDP[g]) #low number=high rank
}
surprise <- which(StatZQuantRatio > 0)
##### define sets to compare for given property #####
nsindices <- which(colnames(adjmat) %in% setdiff(names(AvgDynRank), names(VBnDP)))
if (HubDefinition == "Lu"){
hubindices <- setdiff(which(igraph::degree(graph)>5), nsindices)
} else if (HubDefinition == "Guimera"){
hubindices <- setdiff(which(Z > 2.5), nsindices)
}
dispropindices <- which(colnames(adjmat) %in% setdiff(names(surprise), colnames(adjmat)[c(hubindices, nsindices)]))
discardindices <- setdiff(seq(1:length(SBML$genes)), c(hubindices, nsindices, dispropindices))
##### Max DP along simple paths normed by path length from Node->Hub #####
print(paste(length(hubindices), "hubs in NET", n))
if (length(hubindices)>0){
#PM
if (length(dispropindices)>0){
sumMI <- 0
for (g in dispropindices){
#print(paste0("Gene index ", g))
paths <- all_simple_paths(graph, from=g, to=hubindices, mode="out")
#get last element for every [[p]] paths entry, only retain those where this is index=h
for (h in hubindices){
if (g == h){next}
lastelems <- which(sapply(paths, tail, 1) == h)
pathstoh <- rep(list(NA), length(lastelems))
#print(paste(length(lastelems), "paths to hub", h, "out of", length(paths), "paths to all hubs"))
print("PM")
if (length(pathstoh)> 0){
for (el in 1:length(lastelems)){
pathstoh[[el]] <- paths[[lastelems[el]]]
}
maxMIs <- rep(NA, length(pathstoh))
print(paste(length(pathstoh), "paths from index", g, "to", h))
#print(maxMIs)
for (pa in 1:length(pathstoh)){ #p=list of gene names in path
p <- pathstoh[[pa]]
MIpath <- 0
nodenames <- names(p)
nrnodes <- length(nodenames)
#which(colnames(adjmat) %in% nodenames)
nodenames
nodeindices <- rep(NA, length(nodenames))
for (v in 1:length(nodeindices)){
nodeindices[v] <- which(colnames(adjmat) == nodenames[v])
}# edge indices going from g->h
for (e in 1:(length(nodeindices)-1)){
MI <- MutInfo(SBML, fi=nodeindices[e+1], j=nodeindices[e])
#sum up along path, avg by pathlength, then add to sumMI
MIpath <- MIpath + MI
}
MIpath <- MIpath/(length(nodeindices)-1)
maxMIs[pa] <- MIpath
#print(MIpath)
}#paths loop
#print(maxMIs)
sumMI <- sumMI + max(maxMIs)
}#if length paths>0
}#end hub loop
}#end PM loop
sumMI <- sumMI/(length(dispropindices)*length(hubindices))
maxMIbynet_PM[n] <- sumMI
}#if PMs exist
#NM
if (length(discardindices)>0){
sumMI <- 0
for (g in discardindices){
print(paste0("Gene index ", g))
paths <- all_simple_paths(graph, from=g, to=hubindices, mode="out")
#get last element for every [[p]] paths entry, only retain those where this is index=h
for (h in hubindices){
if (g == h){next}
lastelems <- which(sapply(paths, tail, 1) == h)
pathstoh <- rep(list(NA), length(lastelems))
print(paste(length(lastelems), "paths to hub", h, "out of", length(paths), "paths to all hubs"))
print("NM")
if (length(pathstoh)> 0){
for (el in 1:length(lastelems)){
pathstoh[[el]] <- paths[[lastelems[el]]]
}
maxMIs <- rep(NA, length(pathstoh))
#print(paste(length(pathstoh), "paths from index", g, "to", h))
#print(maxMIs)
for (pa in 1:length(pathstoh)){ #p=list of gene names in path
p <- pathstoh[[pa]]
MIpath <- 0
nodenames <- names(p)
nrnodes <- length(nodenames)
#which(colnames(adjmat) %in% nodenames)
nodenames
nodeindices <- rep(NA, length(nodenames))
for (v in 1:length(nodeindices)){
nodeindices[v] <- which(colnames(adjmat) == nodenames[v])
}# edge indices flowing from g->h
for (e in 1:(length(nodeindices)-1)){
MI <- MutInfo(SBML, fi=nodeindices[e+1], j=nodeindices[e])
#sum these up along the path, avg by pathlength, then add to sumMI
MIpath <- MIpath + MI
}
MIpath <- MIpath/(length(nodeindices)-1)
maxMIs[pa] <- MIpath
#print(MIpath)
}#paths loop
#print(maxMIs)
sumMI <- sumMI + max(maxMIs)
}#if length paths>0
}#end hub loop
}#end NM loop
sumMI <- sumMI/(length(discardindices)*length(hubindices))
maxMIbynet_NM[n] <- sumMI
}#if NMs exist
#NS
if (length(nsindices)>0){
sumMI <- 0
for (g in nsindices){
print(paste0("Gene index ", g))
paths <- all_simple_paths(graph, from=g, to=hubindices, mode="out")
#get last element for every [[p]] paths entry, only retain those where this is index=h
for (h in hubindices){
if (g == h){next}
lastelems <- which(sapply(paths, tail, 1) == h)
pathstoh <- rep(list(NA), length(lastelems))
print(paste(length(lastelems), "paths to hub", h, "out of", length(paths), "paths to all hubs"))
print("NS")
if (length(pathstoh)> 0){
for (el in 1:length(lastelems)){
pathstoh[[el]] <- paths[[lastelems[el]]]
}
maxMIs <- rep(NA, length(pathstoh))
#print(paste(length(pathstoh), "paths from index", g, "to", h))
#print(maxMIs)
for (pa in 1:length(pathstoh)){ #p=list of gene names in path
p <- pathstoh[[pa]]
MIpath <- 0
nodenames <- names(p)
nrnodes <- length(nodenames)
#which(colnames(adjmat) %in% nodenames)
nodenames
nodeindices <- rep(NA, length(nodenames))
for (v in 1:length(nodeindices)){
nodeindices[v] <- which(colnames(adjmat) == nodenames[v])
}# edge indices flowing from g->h
for (e in 1:(length(nodeindices)-1)){
MI <- MutInfo(SBML, fi=nodeindices[e+1], j=nodeindices[e])
#sum these up along the path, avg by pathlength, then add to sumMI
MIpath <- MIpath + MI
}
MIpath <- MIpath/(length(nodeindices)-1)
maxMIs[pa] <- MIpath
#print(MIpath)
}#paths loop
#print(maxMIs)
sumMI <- sumMI + max(maxMIs)
}#if length paths>0
}#end hub loop
}#end NS loop
sumMI <- sumMI/(length(nsindices)*length(hubindices))
maxMIbynet_NS[n] <- sumMI
}#if NS exist
}#end over all if hubs exist
#
}
#Load necessary libraries, setwd #####
rm(list=ls(all=TRUE))
library("BoolNet")
library("igraph")
library("ggplot2")
library("Matrix")
library("ggpubr")
library("gtools")
pathtoscripts <- paste0(dirname(rstudioapi::getSourceEditorContext()$path), "/") #Path to plotscripts + data folder
source(paste0(pathtoscripts, "functions.R"))
path <- paste0(pathtoscripts, "Networks/")
nets <- mixedsort(dir(path, pattern = ".txt"))
##### Robustness tests for threshold #####
##### Bootstrap robustness test, plot FigS3 #####
#Loads seed for chosen random selection of 10000x34 networks, loads data for sensitivity & specificity, creates boxplot
#==> Selection threshold is robust against random selection of networks
# pick 34 nets out of 34 10000 times
# load sensitivity-specificity curves for given combinations of static and dynamic measures
# -> Determine thresholds each time
netseq <- seq(1:length(nets))
reps <- 10000
#If seed is already available for chosen networks, load here:
seed <- readRDS(paste0(pathtoscripts, "bootstrap/seed.RDS"))
seed[2,]
for (n in 1:length(nets)){
Hamming_sens <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/FigS4 data/sensitivity_net", n, "_xs",xs, "_ys", 1 ,".RDS"))
Hamming_spec <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/FigS4 data/specificity_net", n, "_xs",xs, "_ys", 1 ,".RDS"))
ysens_hd <- ysens_hd %+% (Hamming_sens*(1/length(nets)))
yspec_hd <- yspec_hd %+% (Hamming_spec*(1/length(nets)))
Loss_sens <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/FigS4 data/sensitivity_net", n, "_xs",xs, "_ys", 2 ,".RDS"))
Loss_spec <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/FigS4 data/specificity_net", n, "_xs",xs, "_ys", 2 ,".RDS"))
ysens_loss <- ysens_loss %+% (Loss_sens*(1/length(nets)))
yspec_loss <- yspec_loss %+% (Loss_spec*(1/length(nets)))
Gain_sens <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/FigS4 data/sensitivity_net", n, "_xs",xs, "_ys", 3 ,".RDS"))
Gain_spec <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/FigS4 data/specificity_net", n, "_xs",xs, "_ys", 3 ,".RDS"))
ysens_gain <- ysens_gain %+% (Gain_sens*(1/length(nets)))
yspec_gain <- yspec_gain %+% (Gain_spec*(1/length(nets)))
}
#ys <- 1 #1=Hamming distance, 2=Attractor loss, 3=Attractor gain
toppercent <- 72
skipnets <- 14 #skip network if small variation of rankings leads to large number of combinations, save NA-vector instead
### Plot FigS4
# measure <- "VB"
# measure <- "DP"
# measure <- "VBvDP" #union
measure <- "VBnDP" #intersection
# Load data: sensitivity and specificity for dynamic measures at every threshold
ysens_gain <- yspec_gain <- ysens_sd_gain <- yspec_sd_gain <- rep(0,100)
ysens_loss <- yspec_loss <- ysens_sd_loss <- yspec_sd_loss <- rep(0,100)
ysens_hd <- yspec_hd <- ysens_sd_hd <- yspec_sd_hd <- rep(0,100)
if (measure == "VB"){
titlestr <- "(A) Individual dynamic measures - VB"
xs <- 1
} else if (measure == "DP"){
titlestr <- "(B) Individual dynamic measures - DP"
xs <- 2
} else if (measure == "VBvDP"){
titlestr <- "(C) Individual dynamic measures - VB \u222A DP"
xs <- 3
} else if (measure == "VBnDP"){
titlestr <- "(D) Individual dynamic measures - VB \u2229 DP"
xs <- 4
}
for (n in 1:length(nets)){
Hamming_sens <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/FigS4 data/sensitivity_net", n, "_xs",xs, "_ys", 1 ,".RDS"))
Hamming_spec <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/FigS4 data/specificity_net", n, "_xs",xs, "_ys", 1 ,".RDS"))
ysens_hd <- ysens_hd %+% (Hamming_sens*(1/length(nets)))
yspec_hd <- yspec_hd %+% (Hamming_spec*(1/length(nets)))
Loss_sens <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/FigS4 data/sensitivity_net", n, "_xs",xs, "_ys", 2 ,".RDS"))
Loss_spec <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/FigS4 data/specificity_net", n, "_xs",xs, "_ys", 2 ,".RDS"))
ysens_loss <- ysens_loss %+% (Loss_sens*(1/length(nets)))
yspec_loss <- yspec_loss %+% (Loss_spec*(1/length(nets)))
Gain_sens <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/FigS4 data/sensitivity_net", n, "_xs",xs, "_ys", 3 ,".RDS"))
Gain_spec <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/FigS4 data/specificity_net", n, "_xs",xs, "_ys", 3 ,".RDS"))
ysens_gain <- ysens_gain %+% (Gain_sens*(1/length(nets)))
yspec_gain <- yspec_gain %+% (Gain_spec*(1/length(nets)))
}
x <- seq(1:100)
df <- as.data.frame(cbind(x, ysens_hd, yspec_hd, ysens_loss, yspec_loss, ysens_gain, yspec_gain))
plot(
ggplot(df, aes(x, y = ysens, color = "")) +
#gain
geom_point(aes(y = ysens_gain, col = "Sensitivity", col="green"), col="#237d02", alpha=1, shape=19) +
geom_point(aes(y = yspec_gain, col = "Specificity", col="green"), col="#237d02", alpha=1, shape=17) +
#loss
geom_point(aes(y = ysens_loss, col = "Sensitivity", col="orange"), col="#ab7105", alpha=1, shape=19) +
geom_point(aes(y = yspec_loss, col = "Specificity", col="orange"), col="#ab7105", alpha=1, shape=17) +
#Hamming
geom_point(aes(y = ysens_hd, col = "Sensitivity", col="purple"), col="purple", alpha=1, shape=19) +
geom_point(aes(y = yspec_hd, col = "Specificity", col="purple"), col="purple", alpha=1, shape=17) +
scale_x_continuous(labels=c(0,"",20,"",40,"",60,"",80,"",100), breaks=c(0,10,20,30,40,50,60,70,80,90,100)) +
scale_y_continuous(labels=c(0,"",0.2,"",0.4,"",0.6,"",0.8,"",1), breaks=c(0,0.1,0.20,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1)) +
coord_cartesian(ylim = c(0, 1), xlim =c(0,100)) + theme(plot.title = element_text(hjust = 0.5)) +
theme_grey(base_size = 25) + theme(legend.position = "bottom",
axis.text=element_text(size=25), axis.title=element_text(size=20),
plot.title = element_text(size=15)) +
theme(panel.grid.major = element_line(colour="grey", size = (0.5)),
panel.grid.minor = element_line(size = (0.0), colour="grey"), panel.background = element_blank()) +
labs(title=titlestr,
x = "Threshold percentage T of genes \nlabelled as 'high impact'", y = "") +
scale_colour_discrete("") + theme(plot.title = element_text(hjust = 0.5))
)
##### Robustness tests for threshold #####
##### Bootstrap robustness test, plot FigS3 #####
#Loads seed for chosen random selection of 10000x34 networks, loads data for sensitivity & specificity, creates boxplot
#==> Selection threshold is robust against random selection of networks
# pick 34 nets out of 34 10000 times
# load sensitivity-specificity curves for given combinations of static and dynamic measures
# -> Determine thresholds each time
netseq <- seq(1:length(nets))
reps <- 10000
netseq
#If seed does not yet exist, generate & save it
seedmatrix <- matrix(NA, nrow = reps, ncol = length(nets))
for (r in 1:reps){
randomselection <- sample(netseq, size=length(nets), replace = T)
seedmatrix[r,] <- randomselection
}
seed <- seedmatrix
dim(seed)
which(seed == 35)
which(seed == 34)
seed <- seedmatrix
saveRDS(seedmatrix, file=paste0(pathtoscripts, "bootstrap/seed.RDS"))
#If seed is already available for chosen networks, load here:
seed <- readRDS(paste0(pathtoscripts, "bootstrap/seed.RDS"))
nprime <- length(nets)
replacing = T #networks can be selected multiple times, nprime=n=34, replacing=T, select=F for bootstrap
select = F #== F if selecting, ==T if skipping the randomly chosen nets
gainT <- lossT <- hammingT <- balancedTs <- rep(NA,reps)
for (rand in 1:reps){
print(paste0(rand, "/", reps))
randvec <- seed[rand,]
gain_avg_sens <- gain_avg_spec <- loss_avg_sens <- loss_avg_spec <- hamming_avg_sens <- hamming_avg_spec <- rep(0, 100)
for (n in randvec){
#ys: 1=Hamming, 2=AttrLoss, 3=AttrGain
gain_netn_sens <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/sensitivity_net",n, "_xs4_ys3.RDS"))
gain_netn_spec <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/specificity_net",n, "_xs4_ys3.RDS"))
loss_netn_sens <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/sensitivity_net",n, "_xs4_ys2.RDS"))
loss_netn_spec <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/specificity_net",n, "_xs4_ys2.RDS"))
hamming_netn_sens <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/sensitivity_net",n, "_xs4_ys1.RDS"))
hamming_netn_spec <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/specificity_net",n, "_xs4_ys1.RDS"))
gain_avg_sens <- gain_avg_sens + gain_netn_sens
gain_avg_spec <- gain_avg_spec %+% gain_netn_spec
loss_avg_sens <- loss_avg_sens + loss_netn_sens
loss_avg_spec <- loss_avg_spec %+% loss_netn_spec
hamming_avg_sens <- hamming_avg_sens + hamming_netn_sens
hamming_avg_spec <- hamming_avg_spec %+% hamming_netn_spec
}
gainT[rand] <- which(gain_avg_sens > gain_avg_spec)[1]
lossT[rand] <- which(loss_avg_sens > loss_avg_spec)[1]
hammingT[rand] <- which(hamming_avg_sens > hamming_avg_spec)[1]
saveRDS(gainT, file=paste0(pathtoscripts, "bootstrap/gainT.RDS"))
saveRDS(lossT, file=paste0(pathtoscripts, "bootstrap/lossT.RDS"))
saveRDS(hammingT, file=paste0(pathtoscripts, "bootstrap/hammingT.RDS"))
balancedTs[rand] <- mean(c(gainT[rand], lossT[rand], hammingT[rand]))
saveRDS(balancedTs, file=paste0(pathtoscripts, "bootstrap/balancedTs.RDS"))
}
df <- as.matrix(c(gainT,lossT,hammingT,balancedTs))
groups <- c(rep("gainT", reps), rep("lossT", reps), rep("hammingT", reps), rep("balancedTs", reps))
df <- as.data.frame(cbind(df, groups))
names(df) <- c("Thresholds", "groups")
gainT <- readRDS(paste0(pathtoscripts, "bootstrap/gainT.RDS"))
lossT <- readRDS(paste0(pathtoscripts, "bootstrap/lossT.RDS"))
hammingT <- readRDS(paste0(pathtoscripts, "bootstrap/hammingT.RDS"))
balancedTs <- readRDS(paste0(pathtoscripts, "bootstrap/balancedTs.RDS"))
nprime <- length(nets)
replacing = T #networks can be selected multiple times, nprime=n=34, replacing=T, select=F for bootstrap
select = F #== F if selecting, ==T if skipping the randomly chosen nets
gainT <- lossT <- hammingT <- balancedTs <- rep(NA,reps)
for (rand in 1:reps){
print(paste0(rand, "/", reps))
randvec <- seed[rand,]
gain_avg_sens <- gain_avg_spec <- loss_avg_sens <- loss_avg_spec <- hamming_avg_sens <- hamming_avg_spec <- rep(0, 100)
for (n in randvec){
#ys: 1=Hamming, 2=AttrLoss, 3=AttrGain
gain_netn_sens <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/sensitivity_net",n, "_xs4_ys3.RDS"))
gain_netn_spec <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/specificity_net",n, "_xs4_ys3.RDS"))
loss_netn_sens <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/sensitivity_net",n, "_xs4_ys2.RDS"))
loss_netn_spec <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/specificity_net",n, "_xs4_ys2.RDS"))
hamming_netn_sens <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/sensitivity_net",n, "_xs4_ys1.RDS"))
hamming_netn_spec <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/specificity_net",n, "_xs4_ys1.RDS"))
gain_avg_sens <- gain_avg_sens + gain_netn_sens
gain_avg_spec <- gain_avg_spec %+% gain_netn_spec
loss_avg_sens <- loss_avg_sens + loss_netn_sens
loss_avg_spec <- loss_avg_spec %+% loss_netn_spec
hamming_avg_sens <- hamming_avg_sens + hamming_netn_sens
hamming_avg_spec <- hamming_avg_spec %+% hamming_netn_spec
}
gainT[rand] <- which(gain_avg_sens > gain_avg_spec)[1]
lossT[rand] <- which(loss_avg_sens > loss_avg_spec)[1]
hammingT[rand] <- which(hamming_avg_sens > hamming_avg_spec)[1]
saveRDS(gainT, file=paste0(pathtoscripts, "bootstrap/gainT.RDS"))
saveRDS(lossT, file=paste0(pathtoscripts, "bootstrap/lossT.RDS"))
saveRDS(hammingT, file=paste0(pathtoscripts, "bootstrap/hammingT.RDS"))
balancedTs[rand] <- mean(c(gainT[rand], lossT[rand], hammingT[rand]))
saveRDS(balancedTs, file=paste0(pathtoscripts, "bootstrap/balancedTs.RDS"))
}
df <- as.matrix(c(gainT,lossT,hammingT,balancedTs))
groups <- c(rep("gainT", reps), rep("lossT", reps), rep("hammingT", reps), rep("balancedTs", reps))
df <- as.data.frame(cbind(df, groups))
names(df) <- c("Thresholds", "groups")
gainT <- readRDS(paste0(pathtoscripts, "bootstrap/gainT.RDS"))
lossT <- readRDS(paste0(pathtoscripts, "bootstrap/lossT.RDS"))
hammingT <- readRDS(paste0(pathtoscripts, "bootstrap/hammingT.RDS"))
balancedTs <- readRDS(paste0(pathtoscripts, "bootstrap/balancedTs.RDS"))
boxplot(gainT, lossT, hammingT, balancedTs, names=c("Attractor \ngain", "Attractor \nloss", "Hamming \ndistance", "Dynamic \naverage"),
main="Bootstrap analysis of selection thresholds", cex.axis=0.8)
median(balancedTs)
IQR(balancedTs)
dim(seed)
which(seed==35)
#If seed is already available for chosen networks, load here:
seed <- readRDS(paste0(pathtoscripts, "bootstrap/seed.RDS"))
which(seed==35)
