}
ysens_gain
yspec_gain
ysens_sd_gain <- yspec_sd_gain <- ysens_sd_loss <- yspec_sd_loss <- ysens_sd_hd <- yspec_sd_hd <- rep(0,100)
ysens_gain_bynet <- yspec_gain_bynet <- ysens_loss_bynet <- yspec_loss_bynet <- ysens_hd_bynet <- yspec_hd_bynet <- rep(0, length(nets))
for (T in 1:100){
print(T)
for (n in 1:length(nets)){
Hamming_sens <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/sensitivity_net", n, "_xs",xs, "_ys", 1 ,".RDS"))
Hamming_spec <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/specificity_net", n, "_xs",xs, "_ys", 1 ,".RDS"))
Loss_sens <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/sensitivity_net", n, "_xs",xs, "_ys", 2 ,".RDS"))
Loss_spec <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/specificity_net", n, "_xs",xs, "_ys", 2 ,".RDS"))
Gain_sens <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/sensitivity_net", n, "_xs",xs, "_ys", 3 ,".RDS"))
Gain_spec <- readRDS(paste0(path, "Network measures/SensitivitySpecificity/specificity_net", n, "_xs",xs, "_ys", 3 ,".RDS"))
#loop over T: collect sensgains at every T, calc sd over all length_nets
ysens_hd_bynet[n] <- Hamming_sens[T]
yspec_hd_bynet[n] <- Hamming_spec[T]
ysens_loss_bynet[n] <- Loss_sens[T]
yspec_loss_bynet[n] <- Loss_spec[T]
ysens_gain_bynet[n] <- Gain_sens[T]
yspec_gain_bynet[n] <- Gain_spec[T]
ysens_sd_hd[T] <- sd(ysens_hd_bynet, na.rm=T)
yspec_sd_hd[T] <- sd(yspec_hd_bynet, na.rm=T)
ysens_sd_loss[T] <- sd(ysens_loss_bynet, na.rm=T)
yspec_sd_loss[T] <- sd(yspec_loss_bynet, na.rm=T)
ysens_sd_gain[T] <- sd(ysens_gain_bynet, na.rm=T)
yspec_sd_gain[T] <- sd(yspec_gain_bynet, na.rm=T)
}
}
x <- seq(1:100)
df <- as.data.frame(cbind(x, ysens_hd, yspec_hd, ysens_loss, yspec_loss, ysens_gain, yspec_gain))
plot(
ggplot(df, aes(x, y = ysens, color = "")) +
#gain
geom_point(aes(y = ysens_gain, col = "Sensitivity", col="green"), col="#237d02", alpha=1, shape=19) +
geom_point(aes(y = yspec_gain, col = "Specificity", col="green"), col="#237d02", alpha=1, shape=17) +
#loss
geom_point(aes(y = ysens_loss, col = "Sensitivity", col="orange"), col="#ab7105", alpha=1, shape=19) +
geom_point(aes(y = yspec_loss, col = "Specificity", col="orange"), col="#ab7105", alpha=1, shape=17) +
#Hamming
geom_point(aes(y = ysens_hd, col = "Sensitivity", col="purple"), col="purple", alpha=1, shape=19) +
geom_point(aes(y = yspec_hd, col = "Specificity", col="purple"), col="purple", alpha=1, shape=17) +
scale_x_continuous(labels=c(0,"",20,"",40,"",60,"",80,"",100), breaks=c(0,10,20,30,40,50,60,70,80,90,100)) +
scale_y_continuous(labels=c(0,"",0.2,"",0.4,"",0.6,"",0.8,"",1), breaks=c(0,0.1,0.20,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1)) +
coord_cartesian(ylim = c(0, 1), xlim =c(0,100)) + theme(plot.title = element_text(hjust = 0.5)) +
theme_grey(base_size = 25) + theme(legend.position = "bottom",
axis.text=element_text(size=25), axis.title=element_text(size=12.5),
plot.title = element_text(size=15)) +
theme(panel.grid.major = element_line(colour="grey", size = (0.5)),
panel.grid.minor = element_line(size = (0.0), colour="grey"), panel.background = element_blank()) +
labs(title=titlestr,
x = "Threshold percentage T of genes labelled as 'high impact'", y = "") +
scale_colour_discrete("") + theme(plot.title = element_text(hjust = 0.5))
)
##### Generate Plots for Figures 3A-D, comparison between classes #####
#All nodes are either a Hub or Non-Hub.
#Furthermore, all nodes are either not selected (NS), have positive mismatch (PM, VBnDP ranks higher than connectivity)
# or no/negative mismatch (NM, VBnDP equal or lower ranking than connectivity)
#See lists of nodes according to both Hub definitions and their classifications in the given .xlsx tables
# (Node classification tables)
#
##### Plot Figure 3A - Static impact #####
Figure <- "A"
HubDefinition <- "Guimera"
for (HubDefinition in c("Guimera")){
l <- length(nets)
toppercent <- 73
Havgperc <- nonHavgperc <- PMavgperc <- NMavgperc <- NSavgperc <- rep(NA, l)
Hcount <- nonHcount <- PMcount <- NMcount <- NScount <- 0
#Generate data
for (n in 1:length(nets)){
print(n)
##### get measures #####
# get percentiles, VBnDP rankings etc
netfile <- paste(path, nets[n], sep = "")
SBML <- loadNetwork(netfile)
adjmat <- conv2adjmat(SBML, inputcorrected = F)
graph <- graph_from_adjacency_matrix(adjmat)
size <- dim(adjmat)[1]
p <- ceiling((toppercent/100)*size)
VB <- readRDS(paste0(path, "Network measures/net_", n, "_VB.RDS"))
DP <- readRDS(paste0(path, "Network measures/net_", n, "_DP.RDS"))
Z <- readRDS(paste0(path, "Network measures/net_", n, "_Z.RDS"))
Hamming <- readRDS(paste0(path, "Network measures/net_", n, "_Hamming.RDS")) #Hamming distance
AttrLoss <- readRDS(paste0(path, "Network measures/net_", n, "_AttrLoss.RDS")) #Attractor loss
AttrGain <- readRDS(paste0(path, "Network measures/net_", n, "_AttrGain.RDS")) #Attractor gain
AvgDynRank <- colMeans(rbind(rank(-Hamming, ties.method ="min"), rank(AttrLoss, ties.method="min"), rank(-AttrGain, ties.method="min")), na.rm=TRUE)
xselect_VB <- sort(VB, decreasing = TRUE)[1:p]
xselect_DP <- sort(DP, decreasing = TRUE)[1:p]
VBRank <- rank(-VB, ties.method="min")
DPRank <- rank(-DP, ties.method="min")
name <- intersect(names(xselect_VB), names(xselect_DP))
VBnDP <- rep(NA, length(name))
names(VBnDP) <- name
Z_inVBnDP <- Z[which(names(Z) %in% names(VBnDP))]
for (g in 1:length(VBnDP)){
RankA <- VBRank[which(names(VBRank) == names(VBnDP)[g])]
RankB <- DPRank[which(names(DPRank) == names(VBnDP)[g])]
VBnDP[g] <- mean(c(RankA, RankB))
}
ZmatchVBnDP <- Z_inVBnDP[match(names(VBnDP), names(Z_inVBnDP))]
StatZQuantRatio <- rep(NA, length(VBnDP))
names(StatZQuantRatio) <- names(VBnDP)
for (g in 1:length(VBnDP)){
StatZQuantRatio[g] <- percentile(VBnDP, VBnDP[g], fullrange=T) - percentile(-ZmatchVBnDP, -ZmatchVBnDP[g], fullrange=T)
#low number=high rank
}
surprise <- which(StatZQuantRatio > 0)
##### define sets to compare for given property #####
NSindices <- which(colnames(adjmat) %in% setdiff(names(AvgDynRank), names(VBnDP)))
if (HubDefinition == "Guimera"){
hubindices <- which(Z > 2.5) #Z>2.5 hub definition by Guimera et al.
} else {print("Not a valid hub definition.")}
nonhubindices <- setdiff(seq(1:length(SBML$genes)), hubindices)
PMindices <- which(colnames(adjmat) %in% setdiff(names(surprise), colnames(adjmat)[c(NSindices)]))
NMindices <- setdiff(seq(1:length(SBML$genes)), c(NSindices, PMindices))
Hcount <- Hcount + length(hubindices)
nonHcount <- nonHcount + length(nonhubindices)
PMcount <- PMcount + length(PMindices)
NMcount <- NMcount + length(NMindices)
NScount <- NScount + length(NSindices)
##### write to file #####
if (Figure == "A"){
resvec <- sort(VBnDP)
} else if (Figure %in% c("B","C")){
resvec <- sort(AvgDynRank)
}
labelvec <- rep(NA, length(resvec))
#get average percentile position of Hs, pHs, nphs in resvec -> print to three avgvecs
Havgs <- nonHavgs <- PMavgs <- NMavgs <- NSavgs <- c()
for (g in 1:length(resvec)){
index <- which(colnames(adjmat) == names(resvec)[g])
if (index %in% hubindices){
labelvec[g] <- "Hub"
if (Figure %in% c("A", "B")){
Havgs <- append(Havgs, percentile(resvec, resvec[g]))
} else if (Figure == "C"){
Havgs <- append(Havgs, Z[index])
}
}#if in hubindices
if (index %in% nonhubindices){
labelvec[g] <- "Non-Hub"
if (Figure %in% c("A", "B")){
nonHavgs <- append(nonHavgs, percentile(resvec, resvec[g]))
} else if (Figure == "C"){
nonHavgs <- append(nonHavgs, Z[index])
}
}#if in nonhubindices
if (index %in% PMindices){
labelvec[g] <- "PM"
if (Figure %in% c("A", "B")){
PMavgs <- append(PMavgs, percentile(resvec, resvec[g]))
} else if (Figure == "C"){
PMavgs <- append(PMavgs, Z[index])
}
}
if (index %in% NMindices){
labelvec[g] <- "NM"
if (Figure %in% c("A", "B")){
NMavgs <- append(NMavgs, percentile(resvec, resvec[g]))
} else if (Figure == "C"){
NMavgs <- append(NMavgs, Z[index])
}
}
if (index %in% NSindices){
labelvec[g] <- "NS"
if (Figure %in% c("A", "B")){
NSavgs <- append(NSavgs, percentile(resvec, resvec[g]))
} else if (Figure == "C"){
NSavgs <- append(NSavgs, Z[index])
}
}
}
Havgperc[n] <- mean(Havgs)
nonHavgperc[n] <- mean(nonHavgs)
PMavgperc[n] <- mean(PMavgs)
NMavgperc[n] <- mean(NMavgs)
NSavgperc[n] <- mean(NSavgs)
}
df <- matrix(0, nrow = l*4, ncol=2)
df[1:l,1] <- Havgperc
df[(l+1):(2*l),1] <- nonHavgperc
df[(2*l+1):(3*l),1] <- PMavgperc
df[(3*l+1):(4*l),1] <- NMavgperc
df[1:l,2] <- "Hub"
df[(l+1):(2*l),2] <- "Non-Hub"
df[(2*l+1):(3*l),2] <- "PM"
df[(3*l+1):(4*l),2] <- "NM"
df <- as.data.frame(df)
df
names(df) <- c("percentiles", "group")
df$percentiles <- as.numeric(as.character(df$percentiles))
df$group <- factor(df$group, levels = c("Hub", "Non-Hub", "PM", "NM"))
padjvals <- compare_means(percentiles ~ group, df, method="wilcox.test", paired=T, p.adjust.method = "bonferroni") #get p.adj
for (p in 1:length(padjvals$p.adj)){
if (padjvals$p.adj[p] == 1){padjvals$p.adj[p] <- ">0.99"}
}
if (HubDefinition == "Guimera"){
pvals_Guimera <- padjvals
Hcount_Guimera <- Hcount
nonHcount_Guimera <- nonHcount
PMcount_Guimera <- PMcount
NMcount_Guimera <- NMcount
NScount_Guimera <- NScount
Havgperc_Guimera <- Havgperc
nonHavgperc_Guimera <- nonHavgperc
PMavgperc_Guimera <- PMavgperc
NMavgperc_Guimera <- NMavgperc
NSavgperc_Guimera <- NSavgperc
}
plot(
ggboxplot(df, x = "group" , y = "percentiles", xlab="Classification", ylab="Percentile score in static impact ranking") +
stat_pvalue_manual(padjvals, label = "p.adj", y.position = c(1.1,1.2,1.3,
1.5,1.6,
1.8)) + ggtitle("   A") +
theme(plot.title = element_text(size = 20, face = "bold")) +
annotate("text", x=c(1,2,3,4), y=-0.05,
label=c(paste0("n=", Hcount),paste0("n=", nonHcount),paste0("n=", PMcount),paste0("n=", NMcount)))
)
}
##### Generate Plots for Figures 3A-D, comparison between classes #####
# All nodes are either a Hub or Non-Hub.
# Furthermore, all nodes are either not selected (NS), have positive mismatch (PM, VBnDP ranks higher than connectivity)
# or no/negative mismatch (NM, VBnDP equal or lower ranking than connectivity)
# See lists of nodes according to both Hub definitions and their classifications in the given .xlsx table
# (Node classification tables)
#
##### Plot Figure 3A - Static impact #####
plotFig3ABC(nets, path, Figure="A", loaddata=TRUE)
#Load necessary libraries, setwd #####
rm(list=ls(all=TRUE))
if(!require("BoolNet"))
install.packages("BoolNet")
library("BoolNet")
library("igraph")
library("ggplot2")
library("Matrix")
library("ggpubr")
library("gtools")
library("xlsx")
library("ggVennDiagram")
pathtoscripts <- "./" #utils::getSrcDirectory() #Path to plotscripts + data folder
source(paste0(pathtoscripts, "functions.R"))
source(paste0(pathtoscripts, "pattern_templates.R"))
resultmatrix <- readRDS(paste0(pathtoscripts, "resultmatrix.RDS"))
path <- paste0(pathtoscripts, "Networks/")
nets <- mixedsort(dir(path, pattern = ".txt"))
nets
##### Plot Figure 2A #####
# Find selection threshold based on sensitivity/specificity of a static measure vs the average of three sens./spec. - curves
# measure <- "VB"
# measure <- "DP"
# measure <- "VBuDP" #union
measure <- "VBnDP" #intersection
plotAvgDynSensSpec(nets, path, measure = measure, loaddata=TRUE)
##### Plot Figure 2B #####
# Plot sensitivity-specificity curves using the comparison against individual dynamic measures
# measure <- "VB"
# measure <- "DP"
# measure <- "VBuDP" #union
measure <- "VBnDP" #intersection
plotIndivDynSensSpec(nets, path, measure = measure, loaddata=TRUE)
##### Generate Plots for Figures 3A-D, comparison between classes #####
# All nodes are either a Hub or Non-Hub.
# Furthermore, all nodes are either not selected (NS), have positive mismatch (PM, VBnDP ranks higher than connectivity)
# or no/negative mismatch (NM, VBnDP equal or lower ranking than connectivity)
# See lists of nodes according to both Hub definitions and their classifications in the given .xlsx table
# (Node classification tables)
#
##### Plot Figure 3A - Static impact #####
plotFig3ABC(nets, path, Figure="A", loaddata=TRUE)
##### Plot Figure 3D - Max. MI along paths to Hubs #####
# Calculate paths first if loaddata=F
# If calculations have already been performed and saved as RDS, load these results instead with loaddata=T
plotFig3D(nets, path, loaddata=TRUE, threshold=73)
##### Bootstrap robustness test, plot FigS5 #####
# Loads seed for chosen random selection of 10000x35 networks, loads data for sensitivity & specificity, creates boxplot
# ==> Selection threshold is robust against random selection of networks
# Pick 35 nets out of 35, 10000 times
# Load sensitivity-specificity curves for given combinations of static and dynamic measures
# -> Determine thresholds each time
plotThresholdBootstrap(nets, path, reps=10000, generateNewSeed=FALSE, loaddata=TRUE, saveResults=FALSE)
#
##### Generate feature matrix for machine learning algorithms #####
# Exemplary declaration of the first 100 nodes to be included in the test set, measures will be normalised according to the remaining training set
load("./Feature selection matrices/preparedDataSet_normedbynetsize.RData")
normaliseDataset(Dataset=dataset, test.ids = seq(1:100))
##### Plot Figure S6 - Overlap by network size #####
OverlapRatio <- sizes <- edges <- rep(NA, length(nets))
for (n in 1:length(nets)){
print(paste0("NET: ", n))
netfile <- paste(path, nets[n], sep = "")
SBML <- loadNetwork(netfile)
adjmat <- conv2adjmat(SBML, inputcorrected = F)
sizes[n] <- dim(adjmat)[1]
edges[n] <- sum(adjmat)
TopStatOfNet <- returnTopRankings_readfiles(measure="VBnDP", path, nets, n, P = 73)
TopDynOfNet <- returnTopRankings_readfiles(measure="DynAvg", path, nets, n, P = 73)
matches <- intersect(names(TopStatOfNet), names(TopDynOfNet))
unionStatDyn <- union(names(TopStatOfNet), names(TopDynOfNet))
OverlapRatio[n] <- length(matches)/length(TopDynOfNet)
print(OverlapRatio)
print(mean(OverlapRatio, na.rm=TRUE))
}
plot(x = sizes, y = OverlapRatio, xlab = "Size of network", ylab = "Overlap/Size of dynamic selection",
main="Overlap between static and dynamic selection at T=73% as fraction of size of dynamic selection")
plot(x = (edges/sizes), y = OverlapRatio, xlab = "Number of edges/Size of network", ylab = "Overlap/Size of dynamic selection",
main="Overlap between static and dynamic selection at T=73% as fraction of size of dynamic selection")
GKboxCFFL <- NMboxCFFL <- NSboxCFFL <- rep(NA, length(nets))
GKboxIFFL <- NMboxIFFL <- NSboxIFFL <- rep(NA, length(nets))
GKboxBifan <- NMboxBifan <- NSboxBifan <- rep(NA, length(nets))
nodecounter <- 1
for (n in 1:length(nets)){
print(n)
netfile <- paste(path, nets[n], sep = "")
netname <- sub('\\.txt$', '', nets[n])
SBML <- loadNetwork(netfile)
adjmat <- conv2adjmat(SBML)
graph <- graph_from_adjacency_matrix(adjmat)
trinadjmat <- trinaryadjmat(SBML)
C1FFL_vec <- generalfflfinder(trinadjmat, ffltype = "C1")
C2FFL_vec <- generalfflfinder(trinadjmat, ffltype = "C2")
C3FFL_vec <- generalfflfinder(trinadjmat, ffltype = "C3")
C4FFL_vec <- generalfflfinder(trinadjmat, ffltype = "C4")
I1FFL_vec <- generalfflfinder(trinadjmat, ffltype = "I1")
I2FFL_vec <- generalfflfinder(trinadjmat, ffltype = "I2")
I3FFL_vec <- generalfflfinder(trinadjmat, ffltype = "I3")
I4FFL_vec <- generalfflfinder(trinadjmat, ffltype = "I4")
CFFL_vec <- C1FFL_vec + C2FFL_vec + C3FFL_vec + C4FFL_vec
IFFL_vec <- I1FFL_vec + I2FFL_vec + I3FFL_vec + I4FFL_vec
Bifan_vec <- motiffreqbygene(pattern_adjmat = bifan_adjmat, SBML = SBML)
resultmatrix[6,nodecounter:(nodecounter+length(SBML$genes)-1)] <- CFFL_vec
resultmatrix[7,nodecounter:(nodecounter+length(SBML$genes)-1)] <- IFFL_vec
resultmatrix[8,nodecounter:(nodecounter+length(SBML$genes)-1)] <- Bifan_vec
nodecounter <- nodecounter+length(SBML$genes)
#Get corresponding class labels from resultmatrix[4,colinds]
#which(CFFL_vec) are in GKindices, NMindices...
colinds <- which(colnames(resultmatrix) == netname)
classlabels <- resultmatrix[4,colinds]
hublabels <- resultmatrix[5,colinds]
indexGK <- which(classlabels == "Gatekeeper")
indexNM <- which(classlabels == "NM")
indexNS <- which(classlabels == "NS")
indexHub <- which(hublabels == "Hub")
indexNonHub <- which(hublabels == "Non-Hub")
#Sum up participation in motif by class
GKparticipationCFFL <- sum(CFFL_vec[indexGK])
NMparticipationCFFL <- sum(CFFL_vec[indexNM])
NSparticipationCFFL <- sum(CFFL_vec[indexNS])
GKparticipationIFFL <- sum(IFFL_vec[indexGK])
NMparticipationIFFL <- sum(IFFL_vec[indexNM])
NSparticipationIFFL <- sum(IFFL_vec[indexNS])
GKparticipationBifan <- sum(Bifan_vec[indexGK])
NMparticipationBifan <- sum(Bifan_vec[indexNM])
NSparticipationBifan <- sum(Bifan_vec[indexNS])
#Results to plot, get motif participation for specific network
GKboxCFFL[n] <- GKparticipationCFFL
NMboxCFFL[n] <- NMparticipationCFFL
NSboxCFFL[n] <- NSparticipationCFFL
GKboxIFFL[n] <- GKparticipationIFFL
NMboxIFFL[n] <- NMparticipationIFFL
NSboxIFFL[n] <- NSparticipationIFFL
GKboxBifan[n] <- GKparticipationBifan
NMboxBifan[n] <- NMparticipationBifan
NSboxBifan[n] <- NSparticipationBifan
}
mat <- matrix(NA, nrow = 35*9, ncol=4)
colnames(mat) <- c("Frequency", "Class", "Motif", "Selection")
mat[(0*35+1):(1*35),1] <- GKboxCFFL
mat[(1*35+1):(2*35),1] <- NMboxCFFL
mat[(2*35+1):(3*35),1] <- NSboxCFFL
mat[(0*35+1):(1*35),2] <- "PM \n (Gatekeeper)"
mat[(1*35+1):(2*35),2] <- "NM"
mat[(2*35+1):(3*35),2] <- "NS"
mat[1:(3*35),3] <- "C-FFL"
mat[(0*35+1):(1*35),4] <- "Selected"
mat[(1*35+1):(2*35),4] <- "Selected"
mat[(2*35+1):(3*35),4] <- "Non-selected"
mat[(3*35+1):(4*35),1] <- GKboxBifan
mat[(4*35+1):(5*35),1] <- NMboxBifan
mat[(5*35+1):(6*35),1] <- NSboxBifan
mat[(3*35+1):(4*35),2] <- "PM \n (Gatekeeper)"
mat[(4*35+1):(5*35),2] <- "NM"
mat[(5*35+1):(6*35),2] <- "NS"
mat[(3*35+1):(6*35),3] <- "Bifan"
mat[(3*35+1):(4*35),4] <- "Selected"
mat[(4*35+1):(5*35),4] <- "Selected"
mat[(5*35+1):(6*35),4] <- "Non-selected"
#Show occurrence of IFFL in same boxplot
mat[(6*35+1):(7*35),1] <- GKboxIFFL
mat[(7*35+1):(8*35),1] <- NMboxIFFL
mat[(8*35+1):(9*35),1] <- NSboxIFFL
mat[(6*35+1):(7*35),2] <- "PM \n (Gatekeeper)"
mat[(7*35+1):(8*35),2] <- "NM"
mat[(8*35+1):(9*35),2] <- "NS"
mat[(6*35+1):(9*35),3] <- "I-FFL"
mat[(6*35+1):(7*35),4] <- "Selected"
mat[(7*35+1):(8*35),4] <- "Selected"
mat[(8*35+1):(9*35),4] <- "Non-selected"
df <- as.data.frame(mat)
df[,1] <- as.numeric(df[,1])
df$Class <- factor(df$Class , levels=c("PM \n (Gatekeeper)", "NM", "NS"))
df$Selection <- factor(df$Selection , levels=c("Selected", "Non-selected"))
#PLOTTING:
#Selection (LOGSCALE)
ggplot(df,aes(x=Selection, y=Frequency, fill=Motif)) +
geom_boxplot() + scale_y_log10()
#Class (LOGSCALE)
ggplot(df,aes(x=Class, y=Frequency, fill=Motif)) +
geom_boxplot() + scale_y_log10()
##### Plot Figure S8 - Overlap of FVS with selection and classes #####
#Load netwise table containing classification and FVS:
#Loop over nets -> check overlap of FVS by group, write to group specific vectors
netwiseTable <- readRDS(file=paste0(pathtoscripts, "/FVS/netwiseTable.RDS"))
Hub_FVS_overlapByNet <- PM_FVS_overlapByNet <- NM_FVS_overlapByNet <- NS_FVS_overlapByNet <- rep(NA,35)
FVSsizes <- rep(NA, 35)
for (n in 1:35){
print(n)
mat <- netwiseTable[[n]]
Hubs <- na.omit(mat[,3])
PMs <- na.omit(mat[,5])
NMs <- na.omit(mat[,6])
NSs <- na.omit(mat[,7])
FVSs <- na.omit(mat[,8])
FVSsizes[n] <- length(FVSs)
if (length(Hubs) > 0){Hub_FVS_overlapByNet[n] <- length(intersect(FVSs, Hubs))/(length(FVSs))}
if (length(PMs) > 0){PM_FVS_overlapByNet[n] <- length(intersect(FVSs, PMs))/(length(FVSs))}
NM_FVS_overlapByNet[n] <- length(intersect(FVSs, NMs))/(length(FVSs))
NS_FVS_overlapByNet[n] <- length(intersect(FVSs, NSs))/(length(FVSs))
}
#cols: Overlap, Class, Selection
mat <- matrix(NA, nrow=35*3, ncol=3)
colnames(mat) <- c("Overlap", "Class", "Selection")
mat[1:35,1] <- PM_FVS_overlapByNet
mat[(1*35+1):(2*35),1] <- NM_FVS_overlapByNet
mat[(2*35+1):(3*35),1] <- NS_FVS_overlapByNet
mat[1:35,2] <- "PM \n(Gatekeeper)"
mat[(1*35+1):(2*35),2] <- "NM"
mat[(2*35+1):(3*35),2] <- "NS"
mat[1:35,3] <- "Selected"
mat[(1*35+1):(2*35),3] <- "Selected"
mat[(2*35+1):(3*35),3] <- "Non-selected"
df <- as.data.frame(mat)
df[,1] <- as.numeric(df[,1])
df$Class <- factor(df$Class , levels=c("PM \n(Gatekeeper)", "NM", "NS")) #Correct order of boxes in plot
df$Selection <- factor(df$Selection , levels=c("Selected", "Non-selected")) #Correct order of boxes in plot
#jpg save FVS_classOverlap_normbyFVSsize.jpg AND FVS_selectOverlap_normbyFVSsize.jpg
ggplot(df,aes(x=Class, y=Overlap)) +
geom_boxplot() #+ geom_jitter()
ggplot(df,aes(x=Selection, y=Overlap)) +
geom_boxplot()
ggplot(df,aes(x=Selection, y=Overlap)) +
geom_boxplot()
ggplot(df,aes(x=Class, y=Overlap)) +
geom_boxplot()
#
##### Plot Figure S9 - Venn diagrams of Gatekeepers, motifs, canalyzers & FVS #####
#How often should a node participate in a motif/how many functions should it canalyze
CFFLthresh <- 1
IFFLthresh <- 1
Bifanthresh <- 1
Canalthresh <- 1
#Count FFLs and Bifan motif participation by gene across networks
totalIFFLs <- c()
for (n in 1:length(nets)){
#print(paste0("NET: ", n))
netfile <- paste(path, nets[n], sep = "")
netname <- sub('\\.txt$', '', nets[n])
SBML <- loadNetwork(netfile)
trinadjmat <- trinaryadjmat(SBML)
#Sum up all four subtypes of coherent FFLs
CFFL_vec <- generalfflfinder(trinadjmat, "C1") + generalfflfinder(trinadjmat, "C2") +
generalfflfinder(trinadjmat, "C3") + generalfflfinder(trinadjmat, "C4")
#Sum up all four subtypes of incoherent FFLs
IFFL_vec <- generalfflfinder(trinadjmat, "I1") + generalfflfinder(trinadjmat, "I2") +
generalfflfinder(trinadjmat, "I3") + generalfflfinder(trinadjmat, "I4")
Bifan_vec <- motiffreqbygene(pattern_adjmat = bifan_adjmat, SBML = SBML)
}
for (n in 1:length(nets)){
print(paste0("NET: ", n))
netfile <- paste(path, nets[n], sep = "")
netname <- sub('\\.txt$', '', nets[n])
SBML <- loadNetwork(netfile)
trinadjmat <- trinaryadjmat(SBML)
#Sum up all four subtypes of coherent FFLs
CFFL_vec <- generalfflfinder(trinadjmat, "C1") + generalfflfinder(trinadjmat, "C2") +
generalfflfinder(trinadjmat, "C3") + generalfflfinder(trinadjmat, "C4")
#Sum up all four subtypes of incoherent FFLs
IFFL_vec <- generalfflfinder(trinadjmat, "I1") + generalfflfinder(trinadjmat, "I2") +
generalfflfinder(trinadjmat, "I3") + generalfflfinder(trinadjmat, "I4")
Bifan_vec <- motiffreqbygene(pattern_adjmat = bifan_adjmat, SBML = SBML)
}
#Alternatively, load results directly from resultmatrix
GKinds <- which(resultmatrix[4,] == "Gatekeeper")
CFFLinds <- which(as.numeric(resultmatrix[6,]) >= CFFLthresh)
IFFLinds <- which(as.numeric(resultmatrix[7,]) >= IFFLthresh)
Bifaninds <- which(as.numeric(resultmatrix[8,]) >= Bifanthresh)
Canalinds <- which(as.numeric(resultmatrix[9,]) >= Canalthresh)
FVSinds  <- which(as.numeric(resultmatrix[10,]) == 1) #1=FVS, 0=not in FVS
Motifinds <- union(union(CFFLinds, IFFLinds), Bifaninds)# nodes which participate in at least one motif of any kind
# Plot VennDiagram with overlap of GK, 3x motif, canalyzer, FVS (Figure S9, left)
x <- list(Gatekeeper=GKinds, Motif=Motifinds, Canalyzer=Canalinds, FVS=FVSinds)
venn <- Venn(x)
data <- process_data(venn)
ggVennDiagram(x, label = "count", label_size=5) + scale_fill_gradient(low="white",high = "red") +
geom_sf(size=1, color = "grey", data = venn_setedge(data), show.legend = F)
# Plot VennDiagram with overlap of GK, individual motifs (Figure S9, right)
x <- list(Gatekeeper=GKinds, CFFL=CFFLinds, IFFL=IFFLinds, Bifan=Bifaninds)
venn <- Venn(x)
data <- process_data(venn)
ggVennDiagram(x, label = "count", label_size=5, set_size = 5) + scale_fill_gradient(low="white",high = "red") +
geom_sf(size=1, color = "grey", data = venn_setedge(data), show.legend = F)
